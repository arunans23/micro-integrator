<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
  ~
  ~ WSO2 LLC. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  ~
  -->
<api xmlns="http://ws.apache.org/ns/synapse" name="ScatterGatherPI" context="/scatter-gather">
    <resource methods="POST" url-mapping="/json-body-replace">
        <inSequence>
            <scatter-gather parallel-execution="false" result-target="body" content-type="JSON">
                <aggregation expression="${payload.pet}"/>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet1",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <payloadFactory media-type="xml" template-type="default">
                        <format>
                            <pet xmlns="">
                                <name>pet2</name>
                                <type>cat</type>
                                <requestId>${payload.requestId}</requestId>
                            </pet>
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <call>
                        <endpoint>
                            <http method="post" uri-template="http://localhost:8480/scatter-gather/mock-backend-json"/>
                        </endpoint>
                    </call>
                </sequence>
            </scatter-gather>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" url-mapping="/json-variable-output">
        <inSequence>
            <scatter-gather parallel-execution="true" result-target="output_var" content-type="JSON">
                <aggregation expression="${payload.pet}"/>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet1",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <payloadFactory media-type="xml" template-type="default">
                        <format>
                            <pet xmlns="">
                                <name>pet2</name>
                                <type>cat</type>
                                <requestId>${payload.requestId}</requestId>
                            </pet>
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <call>
                        <endpoint>
                            <http method="post" uri-template="http://localhost:8480/scatter-gather/mock-backend-json"/>
                        </endpoint>
                    </call>
                </sequence>
            </scatter-gather>
            <log>
                <message>Scatter Gather output = ${vars.output_var}</message>
            </log>
            <payloadFactory media-type="json" template-type="default">
                <format>{
                    "response": {
                    "requestData": ${payload},
                    "scatterGatherOutput": ${vars.output_var}
                    }
                    }
                </format>
            </payloadFactory>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" uri-template="/xml-body-replace">
        <inSequence>
            <scatter-gather parallel-execution="true" result-target="body" root-element="scatter_response"
                            content-type="XML">
                <aggregation expression="${xpath('$body/node()')}"/>
                <sequence>
                    <payloadFactory media-type="xml" template-type="default">
                        <format>
                            <pet xmlns="">
                                <name>pet1</name>
                                <type>cat</type>
                                <requestId>${xpath('//requestId')}</requestId>
                            </pet>
                        </format>
                        <args>
                        </args>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <call>
                        <endpoint>
                            <http method="post" uri-template="http://localhost:8480/scatter-gather/mock-backend-xml"/>
                        </endpoint>
                    </call>
                </sequence>
            </scatter-gather>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
    <resource methods="POST" uri-template="/xml-variable-output">
        <inSequence>
            <scatter-gather parallel-execution="false" result-target="output_var" root-element="scatter_response"
                            content-type="XML">
                <aggregation expression="${xpath('$body/node()')}"/>
                <sequence>
                    <payloadFactory media-type="xml" template-type="default">
                        <format>
                            <pet xmlns="">
                                <name>pet1</name>
                                <type>cat</type>
                                <requestId>${xpath('//requestId')}</requestId>
                            </pet>
                        </format>
                        <args>
                        </args>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <payloadFactory media-type="xml" template-type="default">
                        <format>
                            <pet xmlns="">
                                <name>pet2</name>
                                <type>dog</type>
                                <requestId>${xpath('//requestId')}</requestId>
                            </pet>
                        </format>
                        <args>
                        </args>
                    </payloadFactory>
                </sequence>
            </scatter-gather>
            <log>
                <message>Scatter Gather XML output = ${vars.output_var}</message>
            </log>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/aggregate-condition">
        <inSequence>
            <scatter-gather parallel-execution="true" result-target="body" content-type="JSON">
                <aggregation expression="${payload.pet}" condition="${payload.pet.type == 'dog'}" timeout="1000"/>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet1",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet2",
                            "type": "cat",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet3",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
            </scatter-gather>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" url-mapping="/not-found-ep">
        <inSequence>
            <scatter-gather parallel-execution="false" result-target="body" content-type="JSON">
                <aggregation expression="${payload.pet}" timeout="1000"/>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet1",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
                <sequence>
                    <call>
                        <endpoint>
                            <http method="post" uri-template="http://localhost:8488/not-found"/>
                        </endpoint>
                    </call>
                </sequence>
                <sequence>
                    <payloadFactory media-type="json" template-type="default">
                        <format>{
                            "pet": {
                            "name": "pet3",
                            "type": "dog",
                            "requestId": ${payload.requestId}
                            }
                            }
                        </format>
                    </payloadFactory>
                </sequence>
            </scatter-gather>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST GET" uri-template="/mock-backend-json">
        <inSequence>
            <payloadFactory media-type="json" template-type="default">
                <format>{
                    "pet": {
                    "name": "pet3",
                    "type": "mock-backend",
                    "requestId": ${payload.requestId}
                    }
                    }
                </format>
            </payloadFactory>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
    <resource methods="POST GET" uri-template="/mock-backend-xml">
        <inSequence>
            <payloadFactory media-type="xml" template-type="default">
                <format>
                    <pet xmlns="">
                        <name>pet2</name>
                        <type>mock-backend</type>
                        <requestId>${xpath('//requestId')}</requestId>
                    </pet>
                </format>
            </payloadFactory>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
    <resource methods="POST" uri-template="/nested-sequential">
        <inSequence>
            <filter xpath="${payload.requestId &gt; 10}">
                <then>
                    <sequence key="scatter_gather_seq"/>
                </then>
                <else>
                    <log category="INFO">
                        <message>Processing else branch</message>
                    </log>
                </else>
            </filter>
            <log category="INFO">
                <message>Nested scatter gather done ${payload}</message>
            </log>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
    <resource methods="POST" uri-template="/nested-parallel">
        <inSequence>
            <filter xpath="${payload.requestId &gt; 10}">
                <then>
                    <sequence key="parallel_scatter_gather_seq"/>
                </then>
                <else>
                    <log category="INFO">
                        <message>Processing else branch</message>
                    </log>
                </else>
            </filter>
            <log category="INFO">
                <message>Nested scatter gather done ${payload}</message>
            </log>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
</api>
