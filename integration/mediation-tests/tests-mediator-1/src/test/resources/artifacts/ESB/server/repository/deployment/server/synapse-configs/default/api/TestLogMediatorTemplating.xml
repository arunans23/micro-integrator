<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
  ~
  ~ WSO2 LLC. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  ~
  -->
<api xmlns="http://ws.apache.org/ns/synapse" name="LogMediatorTemplateAPI" context="/log-mediator-template">
    <resource methods="POST" url-mapping="/info">
        <inSequence>
            <variable name="requestID" expression="${payload.data.name + '_123123'}"/>
            <variable name="endpoint" value="http://localhost:8480/log-mediator-template/mock-backend-json"/>
            <log category="INFO">
                <message>Processing info message: ${payload.data} using endpoint ${vars.endpoint}</message>
            </log>
            <call>
                <endpoint>
                    <http method="post" uri-template="http://localhost:8480/log-mediator-template/mock-backend-json"/>
                </endpoint>
            </call>
            <log category="INFO" separator="|">
                <message>Backend result = ${payload}</message>
                <property name="requestID" expression="${vars.requestID}"/>
                <property name="test" value="abc123"/>
            </log>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" url-mapping="/warn">
        <inSequence>
            <log category="WARN">
                <message>Processing message: ${payload.data} using endpoint ${vars.undefined}</message>
            </log>
            <call>
                <endpoint>
                    <http method="post" uri-template="http://localhost:8480/log-mediator-template/mock-backend-json"/>
                </endpoint>
            </call>
            <log category="WARN">
                <message>Log warn message</message>
                <property name="payload" expression="${payload}"/>
                <property name="content-type-header" expression="${headers['Content-Type']}"/>
            </log>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST" url-mapping="/error">
        <inSequence>
            <log category="ERROR">
                <message>Processing error message: ${payload.data}</message>
            </log>
            <call>
                <endpoint>
                    <http method="post" uri-template="http://localhost:8480/log-mediator-template/mock-backend-json"/>
                </endpoint>
            </call>
            <log category="ERROR">
                <message>Error occurred while processing backend response</message>
                <property name="STATUS_CODE" expression="${properties.axis2.HTTP_SC}"/>
            </log>
            <respond/>
        </inSequence>
    </resource>

    <!-- Resource for testing FATAL log category -->
    <resource methods="POST" url-mapping="/fatal">
        <inSequence>
            <property name="prop1" value="synapse_prop1"/>
            <log category="FATAL">
                <message>Critical issue detected: ${xpath('//data/food')}</message>
                <property name="prop1" expression="${properties.synapse.prop1}"/>
            </log>
            <respond/>
        </inSequence>
    </resource>
    <resource methods="POST GET" uri-template="/mock-backend-json">
        <inSequence>
            <payloadFactory media-type="json" template-type="default">
                <format>{
                    "pet": {
                    "name": "pet3",
                    "type": "mock-backend"
                    }
                    }
                </format>
            </payloadFactory>
            <respond/>
        </inSequence>
        <faultSequence>
        </faultSequence>
    </resource>
</api>
